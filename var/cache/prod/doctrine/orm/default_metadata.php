<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Animal__CLASSMETADATA__' => 0,
'App__Entity__Image__CLASSMETADATA__' => 1,
'App__Entity__Dailydiet__CLASSMETADATA__' => 2,
'App__Entity__Habitat__CLASSMETADATA__' => 3,
'App__Entity__Habitatreport__CLASSMETADATA__' => 4,
'App__Entity__Opening__CLASSMETADATA__' => 5,
'App__Entity__Race__CLASSMETADATA__' => 6,
'App__Entity__Service__CLASSMETADATA__' => 7,
'App__Entity__Testimonial__CLASSMETADATA__' => 8,
'App__Entity__User__CLASSMETADATA__' => 9,
'App__Entity__Vetreport__CLASSMETADATA__' => 10,
'App__Entity__Contact__CLASSMETADATA__' => 11,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Animal',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\AnimalRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'description' => $o[3],
                        'medianlife' => $o[4],
                        'diet' => $o[5],
                        'weight' => $o[6],
                        'size' => $o[7],
                        'status' => $o[8],
                        'slug' => $o[9],
                        'created_at' => $o[10],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'medianlife' => 'medianlife',
                        'diet' => 'diet',
                        'weight' => 'weight',
                        'size' => 'size',
                        'status' => 'status',
                        'slug' => 'slug',
                        'created_at' => 'created_at',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'description' => 'description',
                        'medianlife' => 'medianlife',
                        'diet' => 'diet',
                        'weight' => 'weight',
                        'size' => 'size',
                        'status' => 'status',
                        'slug' => 'slug',
                        'created_at' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'animal',
                    ],
                ],
                'associationMappings' => [
                    [
                        'images' => $o[11],
                        'race_id' => $o[12],
                        'habitat_id' => $o[14],
                    ],
                ],
                'idGenerator' => [
                    $o[16],
                ],
                'name' => [
                    'App\\Entity\\Animal',
                    13 => 'race_id_id',
                    15 => 'habitat_id_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'medianlife',
                    'diet',
                    'weight',
                    'size',
                    'status',
                    'slug',
                    'created_at',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'description',
                    'medianlife',
                    'diet',
                    'weight',
                    'size',
                    'status',
                    'slug',
                    'created_at',
                ],
                'length' => [
                    2 => 255,
                    5 => 255,
                    255,
                    255,
                    255,
                    255,
                ],
                'nullable' => [
                    3 => true,
                    5 => true,
                    true,
                    true,
                    true,
                ],
                'options' => [
                    10 => [
                        'default' => 'CURRENT_TIMESTAMP',
                    ],
                ],
                'cascade' => [
                    11 => [
                        'persist',
                        'remove',
                    ],
                ],
                'fetch' => [
                    11 => 2,
                    2,
                    14 => 2,
                ],
                'orphanRemoval' => [
                    11 => true,
                ],
                'sourceEntity' => [
                    11 => 'App\\Entity\\Animal',
                    'App\\Entity\\Animal',
                    14 => 'App\\Entity\\Animal',
                ],
                'mappedBy' => [
                    11 => 'animal',
                ],
                'sourceToTargetKeyColumns' => [
                    12 => [
                        'race_id_id' => 'id',
                    ],
                    14 => [
                        'habitat_id_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    12 => [
                        'id' => 'race_id_id',
                    ],
                    14 => [
                        'id' => 'habitat_id_id',
                    ],
                ],
                'joinColumns' => [
                    12 => [
                        $o[13],
                    ],
                    14 => [
                        $o[15],
                    ],
                ],
                'joinColumnFieldNames' => [
                    12 => [
                        'race_id_id' => 'race_id_id',
                    ],
                    14 => [
                        'habitat_id_id' => 'habitat_id_id',
                    ],
                ],
                'referencedColumnName' => [
                    13 => 'id',
                    15 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    11 => 'images',
                    'race_id',
                    14 => 'habitat_id',
                ],
                'targetEntity' => [
                    11 => 'App\\Entity\\Image',
                    'App\\Entity\\Race',
                    14 => 'App\\Entity\\Habitat',
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Image',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ImageRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'image',
                    ],
                ],
                'associationMappings' => [
                    [
                        'service' => $o[3],
                        'habitat' => $o[5],
                        'animal' => $o[7],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\Image',
                    4 => 'service_id',
                    6 => 'habitat_id',
                    8 => 'animal_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    3 => 2,
                    5 => 2,
                    7 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Image',
                    5 => 'App\\Entity\\Image',
                    7 => 'App\\Entity\\Image',
                ],
                'inversedBy' => [
                    3 => 'images',
                    5 => 'images',
                    7 => 'images',
                ],
                'sourceToTargetKeyColumns' => [
                    3 => [
                        'service_id' => 'id',
                    ],
                    5 => [
                        'habitat_id' => 'id',
                    ],
                    7 => [
                        'animal_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    3 => [
                        'id' => 'service_id',
                    ],
                    5 => [
                        'id' => 'habitat_id',
                    ],
                    7 => [
                        'id' => 'animal_id',
                    ],
                ],
                'joinColumns' => [
                    3 => [
                        $o[4],
                    ],
                    5 => [
                        $o[6],
                    ],
                    7 => [
                        $o[8],
                    ],
                ],
                'joinColumnFieldNames' => [
                    3 => [
                        'service_id' => 'service_id',
                    ],
                    5 => [
                        'habitat_id' => 'habitat_id',
                    ],
                    7 => [
                        'animal_id' => 'animal_id',
                    ],
                ],
                'referencedColumnName' => [
                    4 => 'id',
                    6 => 'id',
                    8 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'service',
                    5 => 'habitat',
                    7 => 'animal',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Service',
                    5 => 'App\\Entity\\Habitat',
                    7 => 'App\\Entity\\Animal',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Dailydiet',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\DailydietRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'diet' => $o[2],
                        'qty' => $o[3],
                        'created_at' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'diet' => 'diet',
                        'qty' => 'qty',
                        'created_at' => 'created_at',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'diet' => 'diet',
                        'qty' => 'qty',
                        'created_at' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'dailydiet',
                    ],
                ],
                'associationMappings' => [
                    [
                        'animal_id' => $o[5],
                        'user' => $o[7],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\Dailydiet',
                    6 => 'animal_id_id',
                    8 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'diet',
                    'qty',
                    'created_at',
                ],
                'columnName' => [
                    1 => 'id',
                    'diet',
                    'qty',
                    'created_at',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
                'nullable' => [
                    2 => true,
                    true,
                ],
                'options' => [
                    4 => [
                        'default' => 'CURRENT_TIMESTAMP',
                    ],
                ],
                'fetch' => [
                    5 => 2,
                    7 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\Dailydiet',
                    7 => 'App\\Entity\\Dailydiet',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'animal_id_id' => 'id',
                    ],
                    7 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'animal_id_id',
                    ],
                    7 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                    7 => [
                        $o[8],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'animal_id_id' => 'animal_id_id',
                    ],
                    7 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'referencedColumnName' => [
                    6 => 'id',
                    8 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'animal_id',
                    7 => 'user',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Animal',
                    7 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToOneOwningSideMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Habitat',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\HabitatRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'description' => $o[3],
                        'created_at' => $o[4],
                        'slug' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'created_at' => 'created_at',
                        'slug' => 'slug',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'created_at' => 'created_at',
                        'slug' => 'slug',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'habitat',
                    ],
                ],
                'associationMappings' => [
                    [
                        'images' => $o[6],
                        'animal_ids' => $o[7],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\Habitat',
                    8 => 'animal_ids_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'datetime_immutable',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'created_at',
                    'slug',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'created_at',
                    'slug',
                ],
                'length' => [
                    2 => 255,
                    5 => 255,
                ],
                'options' => [
                    4 => [
                        'default' => 'CURRENT_TIMESTAMP',
                    ],
                ],
                'cascade' => [
                    6 => [
                        'persist',
                        'remove',
                    ],
                    [
                        'persist',
                        'remove',
                    ],
                ],
                'fetch' => [
                    6 => 2,
                    2,
                ],
                'orphanRemoval' => [
                    6 => true,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Habitat',
                    'App\\Entity\\Habitat',
                ],
                'mappedBy' => [
                    6 => 'habitat',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'animal_ids_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'animal_ids_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'animal_ids_id' => 'animal_ids_id',
                    ],
                ],
                'unique' => [
                    8 => true,
                ],
                'referencedColumnName' => [
                    8 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'images',
                    'animal_ids',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Image',
                    'App\\Entity\\Animal',
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Habitatreport',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\HabitatreportRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'report' => $o[2],
                        'created_at' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'report' => 'report',
                        'created_at' => 'created_at',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'report' => 'report',
                        'created_at' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'habitatreport',
                    ],
                ],
                'associationMappings' => [
                    [
                        'habitat_id' => $o[4],
                        'user' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Habitatreport',
                    5 => 'habitat_id_id',
                    7 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'report',
                    'created_at',
                ],
                'columnName' => [
                    1 => 'id',
                    'report',
                    'created_at',
                ],
                'length' => [
                    2 => 255,
                ],
                'nullable' => [
                    2 => true,
                ],
                'options' => [
                    3 => [
                        'default' => 'CURRENT_TIMESTAMP',
                    ],
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Habitatreport',
                    6 => 'App\\Entity\\Habitatreport',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'habitat_id_id' => 'id',
                    ],
                    6 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'habitat_id_id',
                    ],
                    6 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'habitat_id_id' => 'habitat_id_id',
                    ],
                    6 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'habitat_id',
                    6 => 'user',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Habitat',
                    6 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Opening',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\OpeningRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'weekday' => $o[2],
                        'start_time' => $o[3],
                        'end_time' => $o[4],
                        'pause_start' => $o[5],
                        'pause_end' => $o[6],
                        'is_closed' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'weekday' => 'weekday',
                        'start_time' => 'start_time',
                        'end_time' => 'end_time',
                        'pause_start' => 'pause_start',
                        'pause_end' => 'pause_end',
                        'is_closed' => 'is_closed',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'weekday' => 'weekday',
                        'start_time' => 'start_time',
                        'end_time' => 'end_time',
                        'pause_start' => 'pause_start',
                        'pause_end' => 'pause_end',
                        'is_closed' => 'is_closed',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'opening',
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Opening',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'time',
                    'time',
                    'time',
                    'time',
                    'boolean',
                ],
                'fieldName' => [
                    1 => 'id',
                    'weekday',
                    'start_time',
                    'end_time',
                    'pause_start',
                    'pause_end',
                    'is_closed',
                ],
                'columnName' => [
                    1 => 'id',
                    'weekday',
                    'start_time',
                    'end_time',
                    'pause_start',
                    'pause_end',
                    'is_closed',
                ],
                'unique' => [
                    2 => true,
                ],
                'nullable' => [
                    3 => true,
                    true,
                    true,
                    true,
                ],
            ],
        ],
        $o[0],
        []
    );
},
6 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Race',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\RaceRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'name' => $o[2],
                        'slug' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'name' => 'name',
                        'slug' => 'slug',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'race',
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Race',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'name',
                    'slug',
                ],
                'columnName' => [
                    1 => 'id',
                    'name',
                    'slug',
                ],
                'length' => [
                    2 => 255,
                    255,
                ],
            ],
        ],
        $o[0],
        []
    );
},
7 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Service',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ServiceRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'title' => $o[2],
                        'description' => $o[3],
                        'created_at' => $o[4],
                        'slug' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'created_at' => 'created_at',
                        'slug' => 'slug',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'title' => 'title',
                        'description' => 'description',
                        'created_at' => 'created_at',
                        'slug' => 'slug',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'service',
                    ],
                ],
                'associationMappings' => [
                    [
                        'images' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\Service',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'text',
                    'datetime_immutable',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'created_at',
                    'slug',
                ],
                'columnName' => [
                    1 => 'id',
                    'title',
                    'description',
                    'created_at',
                    'slug',
                ],
                'length' => [
                    2 => 255,
                    5 => 255,
                ],
                'options' => [
                    4 => [
                        'default' => 'CURRENT_TIMESTAMP',
                    ],
                ],
                'cascade' => [
                    6 => [
                        'persist',
                        'remove',
                    ],
                ],
                'fetch' => [
                    6 => 2,
                ],
                'orphanRemoval' => [
                    6 => true,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\Service',
                ],
                'mappedBy' => [
                    6 => 'service',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'images',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Image',
                ],
            ],
        ],
        $o[0],
        []
    );
},
8 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Testimonial',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\TestimonialRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'active' => $o[2],
                        'pseudonym' => $o[3],
                        'email' => $o[4],
                        'phone' => $o[5],
                        'comment' => $o[6],
                        'note' => $o[7],
                        'created_at' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'active' => 'active',
                        'pseudonym' => 'pseudonym',
                        'email' => 'email',
                        'phone' => 'phone',
                        'comment' => 'comment',
                        'note' => 'note',
                        'created_at' => 'created_at',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'active' => 'active',
                        'pseudonym' => 'pseudonym',
                        'email' => 'email',
                        'phone' => 'phone',
                        'comment' => 'comment',
                        'note' => 'note',
                        'created_at' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'testimonial',
                    ],
                ],
                'associationMappings' => [
                    [
                        'user' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\Testimonial',
                    10 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'boolean',
                    'string',
                    'string',
                    'string',
                    'text',
                    'integer',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'active',
                    'pseudonym',
                    'email',
                    'phone',
                    'comment',
                    'note',
                    'created_at',
                ],
                'columnName' => [
                    1 => 'id',
                    'active',
                    'pseudonym',
                    'email',
                    'phone',
                    'comment',
                    'note',
                    'created_at',
                ],
                'length' => [
                    3 => 255,
                    255,
                    255,
                ],
                'nullable' => [
                    5 => true,
                    7 => true,
                ],
                'fetch' => [
                    9 => 2,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\Testimonial',
                ],
                'sourceToTargetKeyColumns' => [
                    9 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    9 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    9 => [
                        $o[10],
                    ],
                ],
                'joinColumnFieldNames' => [
                    9 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'referencedColumnName' => [
                    10 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'user',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
9 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\User',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\UserRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'email' => $o[2],
                        'fullname' => $o[3],
                        'roles' => $o[4],
                        'password' => $o[5],
                        'created_at' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'fullname' => 'fullname',
                        'roles' => 'roles',
                        'password' => 'password',
                        'created_at' => 'created_at',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'email' => 'email',
                        'fullname' => 'fullname',
                        'roles' => 'roles',
                        'password' => 'password',
                        'created_at' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'user',
                    ],
                ],
                'idGenerator' => [
                    $o[7],
                ],
                'name' => [
                    'App\\Entity\\User',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'json',
                    'string',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'email',
                    'fullname',
                    'roles',
                    'password',
                    'created_at',
                ],
                'columnName' => [
                    1 => 'id',
                    'email',
                    'fullname',
                    'roles',
                    'password',
                    'created_at',
                ],
                'length' => [
                    2 => 180,
                    180,
                ],
                'unique' => [
                    2 => true,
                ],
                'options' => [
                    6 => [
                        'default' => 'CURRENT_TIMESTAMP',
                    ],
                ],
            ],
        ],
        $o[0],
        []
    );
},
10 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Vetreport',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\VetreportRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'state' => $o[2],
                        'diet' => $o[3],
                        'grammage' => $o[4],
                        'detail' => $o[5],
                        'created_at' => $o[6],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'state' => 'state',
                        'diet' => 'diet',
                        'grammage' => 'grammage',
                        'detail' => 'detail',
                        'created_at' => 'created_at',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'state' => 'state',
                        'diet' => 'diet',
                        'grammage' => 'grammage',
                        'detail' => 'detail',
                        'created_at' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'vetreport',
                    ],
                ],
                'associationMappings' => [
                    [
                        'animal_id' => $o[7],
                        'user' => $o[9],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\Vetreport',
                    8 => 'animal_id_id',
                    10 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'state',
                    'diet',
                    'grammage',
                    'detail',
                    'created_at',
                ],
                'columnName' => [
                    1 => 'id',
                    'state',
                    'diet',
                    'grammage',
                    'detail',
                    'created_at',
                ],
                'length' => [
                    2 => 255,
                    255,
                    255,
                    255,
                ],
                'nullable' => [
                    2 => true,
                    true,
                    true,
                    true,
                ],
                'options' => [
                    6 => [
                        'default' => 'CURRENT_TIMESTAMP',
                    ],
                ],
                'fetch' => [
                    7 => 2,
                    9 => 2,
                ],
                'sourceEntity' => [
                    7 => 'App\\Entity\\Vetreport',
                    9 => 'App\\Entity\\Vetreport',
                ],
                'sourceToTargetKeyColumns' => [
                    7 => [
                        'animal_id_id' => 'id',
                    ],
                    9 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    7 => [
                        'id' => 'animal_id_id',
                    ],
                    9 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    7 => [
                        $o[8],
                    ],
                    9 => [
                        $o[10],
                    ],
                ],
                'joinColumnFieldNames' => [
                    7 => [
                        'animal_id_id' => 'animal_id_id',
                    ],
                    9 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'referencedColumnName' => [
                    8 => 'id',
                    10 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    7 => 'animal_id',
                    9 => 'user',
                ],
                'targetEntity' => [
                    7 => 'App\\Entity\\Animal',
                    9 => 'App\\Entity\\User',
                ],
            ],
        ],
        $o[0],
        []
    );
},
11 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Contact',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ContactRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'fullname' => $o[2],
                        'email' => $o[3],
                        'phone' => $o[4],
                        'subject' => $o[5],
                        'message' => $o[6],
                        'created_at' => $o[7],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'fullname' => 'fullname',
                        'email' => 'email',
                        'phone' => 'phone',
                        'subject' => 'subject',
                        'message' => 'message',
                        'created_at' => 'created_at',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'fullname' => 'fullname',
                        'email' => 'email',
                        'phone' => 'phone',
                        'subject' => 'subject',
                        'message' => 'message',
                        'created_at' => 'created_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'contact',
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Contact',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                    'text',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'fullname',
                    'email',
                    'phone',
                    'subject',
                    'message',
                    'created_at',
                ],
                'columnName' => [
                    1 => 'id',
                    'fullname',
                    'email',
                    'phone',
                    'subject',
                    'message',
                    'created_at',
                ],
                'length' => [
                    2 => 50,
                    180,
                    10,
                    100,
                ],
                'nullable' => [
                    4 => true,
                    true,
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
